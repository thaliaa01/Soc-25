# -*- coding: utf-8 -*-
"""crowdfunding

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LHqPjJKLf1pHWblvgILX_Cfbou6I_P-Z
"""

!pip install web3 py-solc-x eth-tester==0.9.0b1 py-evm==0.7.0a2
!pip install web3 py-solc-x

from web3 import Web3, EthereumTesterProvider
from solcx import compile_source, install_solc


w3 = Web3(EthereumTesterProvider())


print(f"Connected: {w3.is_connected()}")
print(f"Test accounts: {w3.eth.accounts}")

# Install Solidity compiler
install_solc('0.8.0')

# Week 1 Contract Code
hello_world_code = """
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HelloWorld {
    string public greeting;

    constructor() {
        greeting = "Hello, World!";
    }

    function setGreeting(string memory _greeting) public {
        greeting = _greeting;
    }

    function getGreeting() public view returns (string memory) {
        return greeting;
    }
}
"""


compiled = compile_source(hello_world_code, solc_version='0.8.0')
contract_id, contract_interface = compiled.popitem()


account = w3.eth.accounts[0]

HelloWorld = w3.eth.contract(abi=contract_interface['abi'], bytecode=contract_interface['bin'])
tx_hash = HelloWorld.constructor().transact({'from': account})
tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)


hello = w3.eth.contract(address=tx_receipt.contractAddress, abi=contract_interface['abi'])


print("Initial greeting:", hello.functions.getGreeting().call())


hello.functions.setGreeting("Hello from Google Colab!").transact({'from': account})
print("Updated greeting:", hello.functions.getGreeting().call())

